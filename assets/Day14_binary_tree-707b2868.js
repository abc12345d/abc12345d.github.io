const g="data:text/markdown;base64,IyA1NTkuIE1heGltdW0gRGVwdGggb2YgTi1hcnkgVHJlZQpUaGUgbWF4aW11bSBkZXB0aCBvZiBhIG4tbmFyeSB0cmVlIGlzIGVxdWFsIHRvIHRoZSBoZWlnaHQgb2YgdGhlIHJvb3Qgbm9kZS4gKHNlZSBtb3JlIGRldGFpbHMgb24gWzEwNC4gTWF4aW11bSBEZXB0aCBvZiBCaW5hcnkgVHJlZV0oLi9EYXkxM19iZnNfYmluYXJ5X3RyZWUubWQvIzEwNC1tYXhpbXVtLWRlcHRoLW9mLWJpbmFyeS10cmVlKSkKIyMjIHdheSAxOiByZWN1cnNpdmUgYXBwcm9hY2ggKGRmcyBpbiBwb3N0IG9yZGVyKQpgYGBQWVRIT04KZGVmIG1heERlcHRoKHNlbGYsIHJvb3Q6ICdOb2RlJykgLT4gaW50OgogICAgZGVmIGdldF9oZWlnaHQoY3Vycik6CiAgICAgICAgaWYgbm90IGN1cnI6CiAgICAgICAgICAgIHJldHVybiAwCiAgICAgICAgCiAgICAgICAgbWF4X2RlcHRoID0gMAogICAgICAgIGZvciBjaGlsZCBpbiBjdXJyLmNoaWxkcmVuOgogICAgICAgICAgICBjaGlsZF9oZWlnaHQgPSBnZXRfaGVpZ2h0KGNoaWxkKSAKICAgICAgICAgICAgaWYgY2hpbGRfaGVpZ2h0ID4gbWF4X2RlcHRoOgogICAgICAgICAgICAgICAgbWF4X2RlcHRoID0gY2hpbGRfaGVpZ2h0CiAgICAgICAgCiAgICAgICAgcmV0dXJuIDEgKyBtYXhfZGVwdGgKICAgIAogICAgcmV0dXJuIGdldF9oZWlnaHQocm9vdCkKYGBgCiMjIyB3YXkgMjogaXRlcmFjdGl2ZSBhcHByb2FjaCAoYmZzKQpgYGBQWVRIT04KIiIiCiMgRGVmaW5pdGlvbiBmb3IgYSBOb2RlLgpjbGFzcyBOb2RlOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHZhbD1Ob25lLCBjaGlsZHJlbj1Ob25lKToKICAgICAgICBzZWxmLnZhbCA9IHZhbAogICAgICAgIHNlbGYuY2hpbGRyZW4gPSBjaGlsZHJlbgoiIiIKZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgZGVxdWUKY2xhc3MgU29sdXRpb246CiAgICBkZWYgbWF4RGVwdGgoc2VsZiwgcm9vdDogJ05vZGUnKSAtPiBpbnQ6CiAgICAgICAgaWYgbm90IHJvb3Q6CiAgICAgICAgICAgIHJldHVybiAwCgogICAgICAgIHF1ZXVlID0gZGVxdWUoW3Jvb3RdKQogICAgICAgIGRlcHRoID0gMAogICAgICAgIHdoaWxlIHF1ZXVlOgogICAgICAgICAgICBzaXplID0gbGVuKHF1ZXVlKQogICAgICAgICAgICBkZXB0aCArPSAxIAogICAgICAgICAgICB3aGlsZSBzaXplID4gMDoKICAgICAgICAgICAgICAgIG5vZGUgPSBxdWV1ZS5wb3BsZWZ0KCkKCiAgICAgICAgICAgICAgICBpZiBub2RlLmNoaWxkcmVuOgogICAgICAgICAgICAgICAgICAgIGZvciBjaGlsZCBpbiBub2RlLmNoaWxkcmVuOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVldWUuYXBwZW5kKGNoaWxkKQoKICAgICAgICAgICAgICAgIHNpemUgLT0gMQoKICAgICAgICByZXR1cm4gZGVwdGgKYGBgCgojIDIyMi4gQ291bnQgQ29tcGxldGUgVHJlZSBOb2RlcwojIyMgd2F5IDE6IGl0ZXJhdGl2ZSBhcHByb2FjaCAoYmZzKQpUaW1lIGNvbXBsZXhpdHk6IE8obilcClNwYWNlIGNvbXBsZXhpdHk6IE8obikKYGBgUFlUSE9OCmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IGRlcXVlCmNsYXNzIFNvbHV0aW9uOgogICAgZGVmIGNvdW50Tm9kZXMoc2VsZiwgcm9vdDogT3B0aW9uYWxbVHJlZU5vZGVdKSAtPiBpbnQ6CiAgICAgICAgaWYgbm90IHJvb3Q6CiAgICAgICAgICAgIHJldHVybiAwCgogICAgICAgIG5vX25vZGVzID0gMAogICAgICAgIHF1ZXVlID0gZGVxdWUoW3Jvb3RdKQogICAgICAgIHdoaWxlIHF1ZXVlOgogICAgICAgICAgICBzaXplID0gbGVuKHF1ZXVlKQogICAgICAgICAgICB3aGlsZSBzaXplID4gMDoKICAgICAgICAgICAgICAgIG5vZGUgPSBxdWV1ZS5wb3BsZWZ0KCkKICAgICAgICAgICAgICAgIG5vX25vZGVzICs9IDEKCiAgICAgICAgICAgICAgICBpZiBub2RlLmxlZnQ6CiAgICAgICAgICAgICAgICAgICAgcXVldWUuYXBwZW5kKG5vZGUubGVmdCkKICAgICAgICAgICAgICAgIGlmIG5vZGUucmlnaHQ6CiAgICAgICAgICAgICAgICAgICAgcXVldWUuYXBwZW5kKG5vZGUucmlnaHQpCgogICAgICAgICAgICAgICAgc2l6ZSAtPSAxCiAgICAgICAgCiAgICAgICAgcmV0dXJuIG5vX25vZGVzCmBgYAojIyMgd2F5IDI6IHJlY3Vyc2l2ZSBhcHByb2FjaCAoZGZzIGluIHBvc3Qgb3JkZXIpClRpbWUgY29tcGxleGl0eTogTyhuKVwKU3BhY2UgY29tcGxleGl0eTogTyhsb2cgbiksIHdoaWNoIGluY2x1ZGVzIHN0YWNrIGZvciByZWN1cnNpb24KYGBgUFlUSE9OCmRlZiBjb3VudE5vZGVzKHNlbGYsIHJvb3Q6IE9wdGlvbmFsW1RyZWVOb2RlXSkgLT4gaW50OgogICAgZGVmIGdldF9ub19jaGlsZHJlbihjdXJyKToKICAgICAgICBpZiBub3QgKGN1cnIubGVmdCBvciBjdXJyLnJpZ2h0KToKICAgICAgICAgICAgcmV0dXJuIDAKCiAgICAgICAgaWYgY3Vyci5sZWZ0IGFuZCBjdXJyLnJpZ2h0OgogICAgICAgICAgICByZXR1cm4gMiArIGdldF9ub19jaGlsZHJlbihjdXJyLmxlZnQpICsgZ2V0X25vX2NoaWxkcmVuKGN1cnIucmlnaHQpCiAgICAgICAgCiAgICAgICAgcmV0dXJuIDEgCgogICAgaWYgbm90IHJvb3Q6CiAgICAgICAgcmV0dXJuIDAKICAgIAogICAgcmV0dXJuIGdldF9ub19jaGlsZHJlbihyb290KSArIDEKYGBgCiMjIyB3YXkgMzogcmVjdXJzaXZlIGFwcHJvYWNoIGFmdGVyIGNvbnNpZGVyaW5nIHRoZSBjaGFyYWN0ZXJpc3RpYyBvZiBjb21wbGV0ZSBiaW5hcnkgdHJlZQpBcyBjb250cmFzdCB0byB0aGUgd2F5IDEgYW5kIHdheSAyIHdoaWNoIHJlcXVpcmUgdGhlIHRyYXZlcnNhbCBvZiB0aGUgd2hvbGUgdHJlZSwgdGhlIHdheSAzIHJ1bnMgaW4gbGVzcyB0aGFuIE8obikgdGltZSBjb21wbGV4aXR5LiBGb3IgZXhhbXBsZSwgdGhlIHdheSAzIGRvbid0IG5lZWQgdG8gdmlzaXQgdGhlIG5vZGVzIGluIGdyZXkgKHNlZSBiZWxvdyBmaWd1cmUpLgohW10oLi9pbWFnZXMvMjAyMzAyMTgyMDExNTEucG5nKSAgCgpUaW1lIGNvbXBsZXhpdHk6IE8gKGxvZyBuICogbG9nIG4pLCBzaW5jZSB3ZSBydW4gTyhsb2cgbikgdG8gY2hlY2sgdGhlIGRlcHRoIGFuZCB3ZSBoYXZlIHRvIGNhbGwgdGhlIGBnZXRfbm9fbm9kZXNgIGZvciBlYWNoIGxldmVsXApTcGFjZSBjb21wbGV4aXR5OiBPKGxvZyBuKQpgYGBQWVRIT04KZGVmIGNvdW50Tm9kZXMoc2VsZiwgcm9vdDogT3B0aW9uYWxbVHJlZU5vZGVdKSAtPiBpbnQ6CiAgICBkZWYgZ2V0X25vX25vZGVzKGN1cnIpOgogICAgICAgIGlmIG5vdCBjdXJyOgogICAgICAgICAgICByZXR1cm4gMAoKICAgICAgICBsZWZ0ID0gY3Vyci5sZWZ0CiAgICAgICAgbGVmdF9kZXB0aCA9IDEKICAgICAgICB3aGlsZShsZWZ0KToKICAgICAgICAgICAgbGVmdF9kZXB0aCArPSAxCiAgICAgICAgICAgIGxlZnQgPSBsZWZ0LmxlZnQKICAgICAgICAKICAgICAgICByaWdodCA9IGN1cnIucmlnaHQKICAgICAgICByaWdodF9kZXB0aCA9IDEKICAgICAgICB3aGlsZShsZWZ0KToKICAgICAgICAgICAgcmlnaHRfZGVwdGggKz0gMQogICAgICAgICAgICByaWdodCA9IHJpZ2h0LnJpZ2h0CgogICAgICAgICMgbGVmdCBkZXB0aCA9IHJpZ2h0IGRlcHRoIC0+IHBlcmZlY3QgYmluYXJ5IHRyZWUKICAgICAgICBpZiBsZWZ0X2RlcHRoID09IHJpZ2h0X2RlcHRoOgogICAgICAgICAgICByZXR1cm4gKDIgKiogbGVmdF9kZXB0aCkgLSAxCgogICAgICAgICMgbm8gb2Ygbm9kZXMgZnJvbSBjdXJyID0gMSArIG5vZGVzIGluIGxlZnQgc3VidHJlZSArIG5vZGVzIGluIHJpZ2h0IHN1YnRyZWUKICAgICAgICByZXR1cm4gZ2V0X25vX25vZGVzKGN1cnIubGVmdCkgKyBnZXRfbm9fbm9kZXMoY3Vyci5yaWdodCkgKyAxCiAgICAKICAgIHJldHVybiBnZXRfbm9fbm9kZXMocm9vdCkKYGBgCgojIFJlZmVyZW5jZQpb5Luj56CB6ZqP5oOz5b2VIC0gMjIyLuWujOWFqOS6jOWPieagkeeahOiKgueCueS4quaVsF0oaHR0cHM6Ly9wcm9ncmFtbWVyY2FybC5jb20vMDIyMi4lRTUlQUUlOEMlRTUlODUlQTglRTQlQkElOEMlRTUlOEYlODklRTYlQTAlOTElRTclOUElODQlRTglOEElODIlRTclODIlQjklRTQlQjglQUElRTYlOTUlQjAuaHRtbCMlRTUlQUUlOEMlRTUlODUlQTglRTQlQkElOEMlRTUlOEYlODklRTYlQTAlOTEp";export{g as default};
