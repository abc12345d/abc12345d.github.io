const g="data:text/markdown;base64,IyA0OTEuIE5vbi1kZWNyZWFzaW5nIFN1YnNlcXVlbmNlcwohW10oLi9pbWFnZXMvMjAyMzAyMjgxNTA0MDYucG5nKQpgYGBQWVRIT04KZGVmIGZpbmRTdWJzZXF1ZW5jZXMoc2VsZiwgbnVtczogTGlzdFtpbnRdKSAtPiBMaXN0W0xpc3RbaW50XV06CiAgICBkZWYgYmFja3RyYWNrKHN0YXJ0SW5kZXgsIHBhdGgsIG51bXMpOgogICAgICAgIGlmIHN0YXJ0SW5kZXggPiBsZW4obnVtcyk6CiAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAKICAgICAgICBpZiBsZW4ocGF0aCkgPj0gMjoKICAgICAgICAgICAgcmVzX2xpc3QuYXBwZW5kKHBhdGhbOl0pCgogICAgICAgICcnJ3dheSAyOgogICAgICAgIHVzZWQgPSBzZXQoKQogICAgICAgICcnJwogICAgICAgIGZvciBpIGluIHJhbmdlKHN0YXJ0SW5kZXgsIGxlbihudW1zKSk6CiAgICAgICAgCiAgICAgICAgICAgIGlmIHBhdGggYW5kIHBhdGhbLTFdID4gbnVtc1tpXToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICAgICAnJyd3YXkgMTogJycnCiAgICAgICAgICAgIGlmIG51bXNbaV0gaW4gbnVtc1tzdGFydEluZGV4OmldOgogICAgICAgICAgICAgICAgY29udGludWUKCiAgICAgICAgICAgICcnJyB3YXkgMjoKICAgICAgICAgICAgaWYgbnVtc1tpXSBpbiB1c2VkOgogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICAgICB1c2VkLmFkZChudW1zW2ldKQogICAgICAgICAgICAnJycKCiAgICAgICAgICAgIHBhdGguYXBwZW5kKG51bXNbaV0pCiAgICAgICAgICAgIGJhY2t0cmFjayhpKzEsIHBhdGgsIG51bXMpCiAgICAgICAgICAgIHBhdGgucG9wKCkKCiAgICByZXNfbGlzdCA9IFtdCiAgICBiYWNrdHJhY2soMCwgW10sIG51bXMpCiAgICByZXR1cm4gcmVzX2xpc3QKYGBgCgojIDQ2LiBQZXJtdXRhdGlvbnMKIyMjIHdheSAxOiB3aXRoIGFuIGV4dHJhIGFycmF5IGB1c2VkYApgYGBQWVRIT04KZGVmIHBlcm11dGUoc2VsZiwgbnVtczogTGlzdFtpbnRdKSAtPiBMaXN0W0xpc3RbaW50XV06CiAgICBkZWYgYmFja3RyYWNrKG51bXMsIHBhdGgsIHVzZWQpOgogICAgICAgIGlmIGFsbCh1c2VkKToKICAgICAgICAgICAgcmVzX2xpc3QuYXBwZW5kKHBhdGhbOl0pCiAgICAgICAgICAgIHJldHVybgogICAgICAgIAogICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihudW1zKSk6CiAgICAgICAgICAgIGlmIHVzZWRbaV0gPT0gVHJ1ZToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICAgICB1c2VkW2ldID0gVHJ1ZQogICAgICAgICAgICBwYXRoLmFwcGVuZChudW1zW2ldKQogICAgICAgICAgICBiYWNrdHJhY2sobnVtcywgcGF0aCwgdXNlZCkKICAgICAgICAgICAgcGF0aC5wb3AoKQogICAgICAgICAgICB1c2VkW2ldID0gRmFsc2UKCiAgICByZXNfbGlzdCA9IFtdCiAgICBiYWNrdHJhY2sobnVtcywgW10sIFtGYWxzZV0gKiBsZW4obnVtcykpCiAgICByZXR1cm4gcmVzX2xpc3QKYGBgCiMjIyB3YXkgMjogd2l0aG91dCBhbnkgZXh0cmEgYXJyYXkKYGBgUFlUSE9OCmRlZiBwZXJtdXRlKHNlbGYsIG51bXM6IExpc3RbaW50XSkgLT4gTGlzdFtMaXN0W2ludF1dOgogICAgZGVmIGJhY2t0cmFjayhwYXRoLCB1bnVzZWQsIHVzZWQpOgogICAgICAgIGlmIGxlbih1bnVzZWQpID09IDA6CiAgICAgICAgICAgIHJlc19saXN0LmFwcGVuZChwYXRoWzpdKQoKICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4odW51c2VkKSk6CiAgICAgICAgICAgIHZhbCA9IHVudXNlZFtpXQoKICAgICAgICAgICAgdXNlZC5hcHBlbmQodmFsKQogICAgICAgICAgICBwYXRoLmFwcGVuZCh2YWwpCiAgICAgICAgICAgIHVudXNlZC5yZW1vdmUodmFsKQoKICAgICAgICAgICAgYmFja3RyYWNrKHBhdGgsIHVudXNlZCwgdXNlZCkKICAgICAgICAgICAgCiAgICAgICAgICAgIHVudXNlZC5pbnNlcnQoaSwgdmFsKQogICAgICAgICAgICBwYXRoLnBvcCgpCiAgICAgICAgICAgIHVzZWQucG9wKCkKCiAgICByZXNfbGlzdCA9IFtdCiAgICBiYWNrdHJhY2soW10sIG51bXMsIFtdKQogICAgcmV0dXJuIHJlc19saXN0CmBgYAoKIyA0Ny4gUGVybXV0YXRpb25zIElJCiMjIyB3YXkgMTogYHVzZWRgIHNldCB0byByZW1vdmUgZHVwbGljYXRlIGluIHRyZWUgbGF5ZXIgYW5kIGAuY291bnQoKWAgdG8gcmVtb3ZlIGV4dHJhIGluIGJyYW5jaCBsZXZlbApgYGBQWVRIT04KZGVmIHBlcm11dGVVbmlxdWUoc2VsZiwgbnVtczogTGlzdFtpbnRdKSAtPiBMaXN0W0xpc3RbaW50XV06CiAgICBkZWYgYmFja3RyYWNrKG51bXMsIHBhdGgpOgogICAgICAgIGlmIGxlbihwYXRoKSA9PSBsZW4obnVtcyk6CiAgICAgICAgICAgIHJlc19saXN0LmFwcGVuZChwYXRoWzpdKQogICAgICAgICAgICByZXR1cm4KICAgICAgICAKICAgICAgICB1c2VkID0gc2V0KCkKICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4obnVtcykpOgogICAgICAgICAgICBpZiBudW1zW2ldIGluIHVzZWQ6CiAgICAgICAgICAgICAgICBjb250aW51ZQoKICAgICAgICAgICAgaWYgcGF0aC5jb3VudChudW1zW2ldKSA9PSBudW1zLmNvdW50KG51bXNbaV0pOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgCiAgICAgICAgICAgIHVzZWQuYWRkKG51bXNbaV0pCiAgICAgICAgICAgIHBhdGguYXBwZW5kKG51bXNbaV0pCiAgICAgICAgICAgIGJhY2t0cmFjayhudW1zLCBwYXRoKQogICAgICAgICAgICBwYXRoLnBvcCgpCiAgICAgICAgICAgIAoKICAgIHJlc19saXN0ID0gW10KICAgIGJhY2t0cmFjayhudW1zLCBbXSkKICAgIHJldHVybiByZXNfbGlzdApgYGAKIyMjIHdheSAyOiBgdXNlZFtpLTFdID09IEZhbHNlYCByZXByZXNlbnQgZHVwbGljYXRlcyBpbiB0cmVlIGxheWVyIGFuZCBgdXNlZFtpXSA9PSB0cnVlYCByZXByZXNlbnQgZXh0cmEgaW4gYnJhbmNoIGxheWVyCmBgYFBZVEhPTgpkZWYgcGVybXV0ZVVuaXF1ZShzZWxmLCBudW1zOiBMaXN0W2ludF0pIC0+IExpc3RbTGlzdFtpbnRdXToKICAgIGRlZiBiYWNrdHJhY2sobnVtcywgcGF0aCwgdXNlZCk6CiAgICAgICAgaWYgbGVuKHBhdGgpID09IGxlbihudW1zKToKICAgICAgICAgICAgcmVzX2xpc3QuYXBwZW5kKHBhdGhbOl0pCiAgICAgICAgICAgIHJldHVybgogICAgICAgIAogICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihudW1zKSk6CiAgICAgICAgICAgIGlmIGkgPiAwIGFuZCBudW1zW2ldID09IG51bXNbaS0xXSBhbmQgdXNlZFtpLTFdID09IEZhbHNlOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHVzZWRbaV0gPT0gVHJ1ZToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgdXNlZFtpXSA9IFRydWUKICAgICAgICAgICAgcGF0aC5hcHBlbmQobnVtc1tpXSkKICAgICAgICAgICAgYmFja3RyYWNrKG51bXMsIHBhdGgsIHVzZWQpCiAgICAgICAgICAgIHVzZWRbaV0gPSBGYWxzZQogICAgICAgICAgICBwYXRoLnBvcCgpCiAgICAgICAgICAgIAoKICAgIHJlc19saXN0ID0gW10KICAgIHVzZWQgPSBbRmFsc2VdICogbGVuKG51bXMpCiAgICBiYWNrdHJhY2soc29ydGVkKG51bXMpLCBbXSwgdXNlZCkKICAgIHJldHVybiByZXNfbGlzdApgYGA=";export{g as default};
