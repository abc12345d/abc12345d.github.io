const g="data:text/markdown;base64,IyA0MzUuIE5vbi1vdmVybGFwcGluZyBJbnRlcnZhbHMKYGBgUFlUSE9OCmRlZiBlcmFzZU92ZXJsYXBJbnRlcnZhbHMoc2VsZiwgaW50ZXJ2YWxzOiBMaXN0W0xpc3RbaW50XV0pIC0+IGludDoKCiAgICAjIHNvcnQgYWNjb3JkaW5nIHRoZSBzdGFydCBvZiBpbnRlcnZhbAogICAgaW50ZXJ2YWxzLnNvcnQoa2V5ID0gbGFtYmRhIHg6IHhbMF0pCgogICAgcmVzdWx0ICA9IDAKICAgIGxhc3RFbmQgPSBpbnRlcnZhbHNbMF1bMV0KICAgIGZvciBzdGFydCwgZW5kIGluIGludGVydmFsc1sxOl06CiAgICAgICAgaWYgc3RhcnQgPCBsYXN0RW5kOgogICAgICAgICAgICAjIG92ZXJsYXBwaW5nCiAgICAgICAgICAgIHJlc3VsdCArPSAxCiAgICAgICAgICAgICMgdXBkYXRlIGxhc3RfZW5kIGluIHRoaXMgd2F5IGlzIGZ1bmN0aW9uYWxseSBlcXVhbCB0byBkZWxldGUgdGhlIGludGVydmFsIHdpdGggbGFyZ2VyIGVuZHBvaW50cwogICAgICAgICAgICBsYXN0RW5kID0gbWluKGxhc3RFbmQsZW5kKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgbm90IG92ZXJsYXBwaW5nLCB1cGRhdGUgbGFzdF9lbmQKICAgICAgICAgICAgbGFzdEVuZCA9IGVuZCAgICAgICAgCgogICAgcmV0dXJuIHJlc3VsdApgYGAKCiMgNzYzLiBQYXJ0aXRpb24gTGFiZWxzCiMjIyB2ZXJzaW9uIDE6IGdyZWVkeQpUaW1lIGNvbXBsZXhpdHk6IE8oNG4pCmBgYFBZVEhPTgpkZWYgcGFydGl0aW9uTGFiZWxzKHNlbGYsIHM6IHN0cikgLT4gTGlzdFtpbnRdOgogICAgICAgICMgc3RvcmUgYWxwaGFiZXQgYXMga2V5IGFuZCB0aGUgcG9zaXRpb24gaXQgYXBwZWFyZWQgYXMgdmFsdWUKICAgICAgICBhcHBlYXJlZCA9IHt9CiAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKHMpKToKICAgICAgICAgICAgaWYgc1tpXSBpbiBhcHBlYXJlZC5rZXlzKCk6CiAgICAgICAgICAgICAgICBhcHBlYXJlZFtzW2ldXS5hcHBlbmQoaSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGFwcGVhcmVkW3NbaV1dID0gW2ldCiAgICAgICAgCiAgICAgICAgIyBmb3IgZWFjaCBhbHBoYWJldCwgb25seSBzdG9yZSB0aGUgZmlyc3QgaW5kZXggYW5kIGxhc3QgaW5kZXggaXQgYXBwZWFyZWQKICAgICAgICAjIGZvciBhbHBoYWJldCBvbmx5IGFwcGVhcmVkIG9uY2UsIHNldCBsYXN0IGluZGV4IGludG8gZmlyc3QgaW5kZXgKICAgICAgICBpbnRlcnZhbHMgPSBbXQogICAgICAgIGZvciBpZHhfbGlzdCBpbiBhcHBlYXJlZC52YWx1ZXMoKToKICAgICAgICAgICAgaWYgbGVuKGlkeF9saXN0KSA+PSAyOgogICAgICAgICAgICAgICAgaW50ZXJ2YWxzLmFwcGVuZChbaWR4X2xpc3RbMF0saWR4X2xpc3RbLTFdXSkKICAgICAgICAgICAgZWxpZiBsZW4oaWR4X2xpc3QpID09IDE6CiAgICAgICAgICAgICAgICBpbnRlcnZhbHMuYXBwZW5kKFtpZHhfbGlzdFswXSxpZHhfbGlzdFswXV0pCiAgICAgICAgCiAgICAgICAgIyByZW1vdmUgb3ZlcmxhcHBpbmcgaW50ZXJ2YWxzCiAgICAgICAgIyBieSBhcHBlbmQgdGhlIGxhc3QgaW5kZXggb2Ygbm9uLW92ZXJsYXBwaW5nIGludGVydmFscyBpbnRvIHJlc3VsdHMKICAgICAgICByZXN1bHQgPSBbXQogICAgICAgIGxhc3RfZW5kID0gaW50ZXJ2YWxzWzBdWzFdCiAgICAgICAgZm9yIGludGVydmFsIGluIGludGVydmFsczoKICAgICAgICAgICAgc3RhcnQgPSBpbnRlcnZhbFswXQogICAgICAgICAgICBlbmQgPSBpbnRlcnZhbFsxXQoKICAgICAgICAgICAgaWYgc3RhcnQgPD0gbGFzdF9lbmQ6CiAgICAgICAgICAgICAgICBsYXN0X2VuZCA9IG1heChsYXN0X2VuZCwgZW5kKQogICAgICAgICAgICBlbHNlOiAKICAgICAgICAgICAgICAgIHJlc3VsdC5hcHBlbmQobGFzdF9lbmQpCiAgICAgICAgICAgICAgICBsYXN0X2VuZCA9IGVuZAogICAgICAgIHJlc3VsdC5hcHBlbmQobGFzdF9lbmQpCgogICAgICAgICMgdHJhbnNmb3JtIHJlc3VsdCBhcnJheSBmcm9tIGxhc3QgaW5kZXggb2Ygbm9uLW92ZXJsYXBwaW5nIGludGVydmFscwogICAgICAgICMgaW50byBpbnRlZ2VycyByZXByZXNlbnRpbmcgdGhlIHNpemUgb2YgdGhlIGludGVydmFscwogICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihyZXN1bHQpLTEsIC0xLCAtMSk6CiAgICAgICAgICAgIGlmIGkgPT0gMDoKICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHJlc3VsdFtpXSArIDEKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IHJlc3VsdFtpXSAtIHJlc3VsdFtpLTFdCiAgICAgICAgCiAgICAgICAgcmV0dXJuIHJlc3VsdApgYGAKIyMjIHZlcnNpb24gMjogZ3JlZWR5IApUaW1lIGNvbXBsZXhpdHk6IE8oMm4pCmBgYFBZVEhPTgpkZWYgcGFydGl0aW9uTGFiZWxzKHNlbGYsIHM6IHN0cikgLT4gTGlzdFtpbnRdOgogICAgIyBzdG9yZSBsZXR0ZXIgYXMga2V5IGFuZCB0aGUgZmlyc3QgaW5kZXggYW5kIGxhc3QgaW5kZXggaXQgYXBwZWFyZWQgYXMgdmFsdWUKICAgIGxldHRlckludGVydmFsRGljdCA9IHt9CiAgICBmb3IgaW5kZXggaW4gcmFuZ2UobGVuKHMpKToKICAgICAgICBpZiBzW2luZGV4XSBpbiBsZXR0ZXJJbnRlcnZhbERpY3Qua2V5cygpOgogICAgICAgICAgICBsZXR0ZXJJbnRlcnZhbERpY3Rbc1tpbmRleF1dWzFdID0gaW5kZXgKICAgICAgICBlbHNlOgogICAgICAgICAgICBsZXR0ZXJJbnRlcnZhbERpY3Rbc1tpbmRleF1dID0gW2luZGV4LGluZGV4XQoKICAgIGludGVydmFscyA9IGxpc3QobGV0dGVySW50ZXJ2YWxEaWN0LnZhbHVlcygpKQogICAgcmVzdWx0ID0gW10KICAgIHByZXZTdGFydCA9IDAKICAgIHByZXZFbmQgPSBpbnRlcnZhbHNbMF1bMV0KICAgIAogICAgZm9yIFtzdGFydCxlbmRdIGluIGludGVydmFsc1sxOl06CiAgICAgICAgaWYgc3RhcnQgPCBwcmV2RW5kOgogICAgICAgICAgICAjIG92ZXJsYXBwaW5nLCBzdG9yZSB0aGUgbGFyZ2VyIGVuZCBzbyB0aGF0IGVhY2ggbGV0dGVyIGFwcGVhcnMgaW4gYXQgbW9zdCBvbmUgcGFydAogICAgICAgICAgICBwcmV2RW5kID0gbWF4KGVuZCwgcHJldkVuZCkKICAgICAgICBlbHNlOgogICAgICAgICAgICByZXN1bHQuYXBwZW5kKHByZXZFbmQtcHJldlN0YXJ0KzEpCiAgICAgICAgICAgIHByZXZFbmQgPSBlbmQKICAgICAgICAgICAgcHJldlN0YXJ0ID0gc3RhcnQKCiAgICByZXN1bHQuYXBwZW5kKHByZXZFbmQtcHJldlN0YXJ0KzEpCiAgICByZXR1cm4gcmVzdWx0CmBgYAoKIyA1Ni4gTWVyZ2UgSW50ZXJ2YWxzCmBgYFBZVEhPTgpkZWYgbWVyZ2Uoc2VsZiwgaW50ZXJ2YWxzOiBMaXN0W0xpc3RbaW50XV0pIC0+IExpc3RbTGlzdFtpbnRdXToKICAgIGludGVydmFscy5zb3J0KGtleSA9IGxhbWJkYSB4OiB4WzBdKQoKICAgIHByZXZTdGFydCA9IGludGVydmFsc1swXVswXQogICAgcHJldkVuZCA9IGludGVydmFsc1swXVsxXQogICAgbm9uT3ZlcmxhcEludGVydmFsID0gW10KICAgIGZvciBbc3RhcnQsZW5kXSBpbiBpbnRlcnZhbHM6CiAgICAgICAgaWYgc3RhcnQgPD0gcHJldkVuZDoKICAgICAgICAgICAgIyBvdmVybGFwcGluZwogICAgICAgICAgICBwcmV2RW5kID0gbWF4KGVuZCxwcmV2RW5kKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG5vbk92ZXJsYXBJbnRlcnZhbC5hcHBlbmQoW3ByZXZTdGFydCxwcmV2RW5kXSkKICAgICAgICAgICAgcHJldlN0YXJ0ID0gc3RhcnQKICAgICAgICAgICAgcHJldkVuZCA9IGVuZAogICAgCiAgICBub25PdmVybGFwSW50ZXJ2YWwuYXBwZW5kKFtwcmV2U3RhcnQscHJldkVuZF0pCiAgICByZXR1cm4gbm9uT3ZlcmxhcEludGVydmFsCmBgYAo=";export{g as default};
