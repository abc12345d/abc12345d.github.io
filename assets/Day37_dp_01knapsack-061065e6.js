const g="data:text/markdown;base64,IyAxMDQ5LiBMYXN0IFN0b25lIFdlaWdodCBJSQpjb3JlIGlkZWE6XApUcmFuc2Zvcm0gdGhlIHF1ZXN0aW9uIGludG8gMS8wIGtuYXBzYWNrIHByb2JsZW0gd2hpY2ggdXNlIGR5bmFtaWMgcHJvZ3JhbW1pbmcgYWxnb3JpdGhtLgoKRnJvbSB0aGUgcXVlc3Rpb24sIHdlIGtuZXcgdGhhdCB0aGVyZSBpcyBhdCBtb3N0IG9uZSBzdG9uZSBsZWZ0IGF0IHRoZSBlbmQgb2YgdGhlIGdhbWUgYW5kIHdlIG11c3QgcmV0dXJuIHRoZSBzbWFsbGVzdCBwb3NzaWJsZSB3ZWlnaHQgb2YgdGhlIGxlZnQgc3RvbmUgKGlmIHRoZXJlIGlzIG9uZSkuCgpgYGAKbGVmdF9zdG9uZSAKPSBzdG9uZV9YIC0gc3RvbmVfWSAKPSAoYSBwaWxlIG9mIHN0b25lcykgLSAoYSBwaWxlIG9mIHN0b25lcykKCnNtYWxsZXN0IGxlZnQgc3RvbmUgPSBzbWFsbGVzdCBkaWZmZXJlbmNlIGJldHdlZW4gdHdvIHBpbGVzIG9mIHN0b25lcwpgYGAKClRvIGdldCB0d28gcGlsZXMgb2Ygc3RvbmVzIHdoaWNoIGhhdmUgc21hbGxlc3QgZGlmZmVyZW5jZSBpbiB3ZWlnaHQsIHdlIG11c3QgZm9ybSB0d28gcGlsZXMgb2Ygc3RvbmVzIHdoZXJlIHRoZWlyIHdlaWdodCBzdW1tZWQgdG8gYHN1bShzdG9uZXMpIC8vIDJgIG9yIGFzIGNsb3NlIGFzIHBvc3NpYmxlIHRvIHRoZSBudW1iZXIuCgpGb3IgZXhhbXBsZSwKYGBgCnN0b25lcyA9IFsyLDcsNCwxLDgsMV0KQmFnIGxpbWl0ID0gc3VtKHN0b25lcykgLy8gMiA9IDExCndlaWdodFtpXSA9IHZhbHVlW2ldID0gc3RvbmVzW2ldCmRwW2ldID0gdGhlIG1heGltdW0gd2VpZ2h0IG9mIHN0b25lcyBpbiB0aGUgYmFnIHdoZW4gdGhlIGJhZyBsaW1pdCBpcyBgaWAKYGBgCgpUaW1lIGNvbXBsZXhpdHk6IE8obSAqIG4pIHdoZXJlIG0gPSBsZW4oc3RvbmVzKSwgbiA9IHN1bShzdG9uZXMpXApTcGFjZSBjb21wbGV4aXR5OiBPKG4pCgpgYGBQWVRIT04KZGVmIGxhc3RTdG9uZVdlaWdodElJKHNlbGYsIHN0b25lczogTGlzdFtpbnRdKSAtPiBpbnQ6CgogICAgbGVmdF9zdG9uZSA9IDAKICAgIHRvdGFsID0gc3VtKHN0b25lcykKICAgIGhhbGZfc3VtID0gdG90YWwgLy8gMgoKICAgIGlmIHRvdGFsICUgMiA9PSAxOgogICAgICAgIGxlZnRfc3RvbmUgKz0gMQoKICAgICMgaW5pdGlhbGlzYXRpb24gb2YgZHAgYXJyYXkKICAgIGRwID0gWzBdICogKGhhbGZfc3VtICsgMSkKCiAgICBmb3Igc3RvbmUgaW4gc3RvbmVzOgogICAgICAgICMgdHJhdmVyc2UgZnJvbSB0aGUgbGFzdCBiYWcgd2VpZ2h0IAogICAgICAgICMgc28gdGhhdCB0aGUgdG9wIGxlZnQgY29ybmVyIHdpbGwgbm90IGJlIG92ZXJ3cm90ZQogICAgICAgIGZvciBpIGluIHJhbmdlKGhhbGZfc3VtLCBzdG9uZSAtIDEsIC0xKToKICAgICAgICAgICAgZHBbaV0gPSBtYXgoZHBbaV0sIGRwW2ktc3RvbmVdICsgc3RvbmUpCgogICAgbGVmdF9zdG9uZSArPSAoaGFsZl9zdW0gLSBkcFtoYWxmX3N1bV0pICogMgoKICAgIHJldHVybiBsZWZ0X3N0b25lIAogICAgIyBvciByZXR1cm4KICAgICMgKHRvdGFsIC0gZHBbaGFsZl9zdW1dKSAtIGRwW2hhbGZfc3VtXSAKYGBgCgojIDQ5NC4gVGFyZ2V0IFN1bQojIyMgd2F5IDE6IGJhY2t0cmFja2luZyB3aXRob3V0IHBydW5uaW5nClJ1bm5pbmcgYWxsIHRoZSB0ZXN0IGNhc2VzIHdpdGggdGhpcyB3YXkgd2lsbCBsZWFkIHRvIGB0aW1lIGxpbWl0IGV4Y2VlZGVkYC4KClRpbWUgY29tcGxleGl0eTogTygyPHN1cD5uPC9zdXA+KSB3aGVyZSBuID0gbGVuKG51bXMpXApTcGFjZSBjb21wbGV4aXR5OiBPKG4pCmBgYFBZVEhPTgpkZWYgZmluZFRhcmdldFN1bVdheXMoc2VsZiwgbnVtczogTGlzdFtpbnRdLCB0YXJnZXQ6IGludCkgLT4gaW50OgogICAgZGVmIGJhY2t0cmFjayh0b3RhbCxpbmRleCk6CiAgICAgICAgbm9ubG9jYWwgcmVzdWx0CiAgICAgICAgaWYgaW5kZXggPT0obGVuKG51bXMpLTEpOgogICAgICAgICAgICBpZiB0b3RhbCA9PSB0YXJnZXQ6CiAgICAgICAgICAgICAgICByZXN1bHQgKz0gMQogICAgICAgICAgICByZXR1cm4KCiAgICAgICAgaW5kZXggKz0gMQogICAgICAgIGZvciBzeW1ib2wgaW4gWzEsIC0xXToKICAgICAgICAgICAgbnVtYmVyID0gbnVtc1tpbmRleF0KICAgICAgICAgICAgbnVtYmVyICo9IHN5bWJvbAogICAgICAgICAgICB0b3RhbCArPSBudW1iZXIKICAgICAgICAgICAgYmFja3RyYWNrKHRvdGFsLGluZGV4KQogICAgICAgICAgICB0b3RhbCAtPSBudW1iZXIKCiAgICAKCiAgICByZXN1bHQgPSAwCiAgICBiYWNrdHJhY2soMCwtMSkKICAgIHJldHVybiByZXN1bHQgCmBgYAojIyMgd2F5IDI6IGR5bmFtaWMgcHJvZ3JhbW1pbmcocmVjdXJzaW9uIHdpdGggbWVtbykKVGhpcyBxdWVzdGlvbiBpcyBhc2tpbmcgdGhlIG51bWJlciBvZiBkaWZmZXJlbnQgZXhwcmVzc2lvbnMgdGhhdCB3ZSBjYW4gYnVpbGQsIHdoaWNoIGV2YWx1YXRlcyB0byB0YXJnZXQuCgpBY2NvcmRpbmcgdG8gdGhlIHNldHRpbmcgb2YgcXVlc3Rpb25zLCAKYGBgUFlUSE9OCmYodGFyZ2V0LGluZGV4KSA9IG4gbnVtYmVyIG9mIGRpZmZlcmVudCBleHByCmYodGFyZ2V0LCBpbmRleCkgPSBmKHRhcmdldCAtIG51bXNbaW5kZXhdLCBpbmRleCAtIDEpICsgZih0YXJnZXQgKyBudW1zW2luZGV4XSwgaW5kZXggLSAxKQoKIyB3aGVuIGluZGV4ID0gMCwgCnJlc3VsdCA9IDAKaWYgYWNjdW0gPT0gK251bXNbMF06CiAgICByZXN1bHQgKz0gMQppZiBhY2N1bSA9PSAtbnVtc1swXToKICAgIHJlc3VsdCArPSAxCnJldHVybiByZXN1bHQgCgojIG51bXMgPSBbMSAyXQojIGYoMiwgMSkKIyA9IGYoMCwwKSArIGYoNCwwKQojID0gMAoKIyBmKDMsMSkKIyA9IGYoMSwwKSArIGYoNSwwKQoKIyBudW1zID0gWzEsMSwxLDEsMV0KIyBmKDMsIDQpCiMgPSBmKDIsMykgKyBmKDQsMykgCiMgPSBmKDEsMikgKyBmKDMsMikgKyBmKDMsMikgKyBmKDUsMikKIyA9IGYoMCwxKSArIDMqZigyLDEpICsgMyogZig0LDEpICsgZig2LDEpCiMgPSBmKC0xLDApICtmKDEsMCkgKyAzKmYoMSwwKSArIDMqZigzLDApICsgMypmKDMsMCkgKyA0KmYoNSwwKSAgICAgICAgICAgKyBmKDcsMCkKIyA9IDUKYGBgClRpbWUgY29tcGxleGl0eTogTygybikgd2hlcmUgbiA9IGxlbihudW1zKSBcClNwYWNlIGNvbXBsZXhpdHk6IE8obikKYGBgUFlUSE9OCmRlZiBmaW5kVGFyZ2V0U3VtV2F5cyhzZWxmLCBudW1zOiBMaXN0W2ludF0sIHRhcmdldDogaW50KSAtPiBpbnQ6CiAgICBkZWYgZHAoYWNjdW0sIGluZGV4KToKCiAgICAgICAgaWYgKGFjY3VtLGluZGV4KSBpbiBtZW1vLmtleXMoKToKICAgICAgICAgICAgcmV0dXJuIG1lbW9bKGFjY3VtLGluZGV4KV0KCiAgICAgICAgaWYgaW5kZXggPT0gMDoKICAgICAgICAgICAgcmVzdWx0ID0gMAogICAgICAgICAgICBpZiBhY2N1bSA9PSArbnVtc1swXToKICAgICAgICAgICAgICAgIHJlc3VsdCArPSAxCiAgICAgICAgICAgIGlmIGFjY3VtID09IC1udW1zWzBdOgogICAgICAgICAgICAgICAgcmVzdWx0ICs9IDEKCiAgICAgICAgICAgIHJldHVybiByZXN1bHQKCiAgICAgICAgcG9zID0gZHAoYWNjdW0gKyBudW1zW2luZGV4XSwgaW5kZXggLSAxKQogICAgICAgIG5lZyA9IGRwKGFjY3VtIC0gbnVtc1tpbmRleF0sIGluZGV4IC0gMSkKICAgICAgICBtZW1vWyhhY2N1bSxpbmRleCldID0gcG9zICsgbmVnCiAgICAgICAgcmV0dXJuIHBvcyArIG5lZwoKICAgIG1lbW8gPSB7fQogICAgcmV0dXJuIGRwKHRhcmdldCwgbGVuKG51bXMpLTEpCmBgYAoKVE9ETzogIDQ3NC5PbmVzIGFuZCB6ZXJvcwo=";export{g as default};
