const I="data:text/markdown;base64,IyAyMzIuIEltcGxlbWVudCBRdWV1ZSB1c2luZyBTdGFja3MKSW4gb3JkZXIgdG8gaW1wbGVtZW50IHF1ZXVlIGJ5IHVzaW5nIG9ubHkgc3RhY2ssIHdlIG5lZWQgYXQgbGVhc3QgdHdvIHN0YWNrcyB3aGljaCByZXNwb25zaWJsZSBmb3IgaW5wdXQgYW5kIG91dHB1dCByZXNwZWN0aXZlbHkuCiFbXSguL2ltYWdlcy8yMDIzMDIxMDExMjQxNS5wbmcpICAKYGBgUFlUSE9OCmNsYXNzIE15UXVldWU6CgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuaW5fc3RhY2sgPSBbXQogICAgICAgIHNlbGYub3V0X3N0YWNrID0gW10KCiAgICBkZWYgcHVzaChzZWxmLCB4OiBpbnQpIC0+IE5vbmU6CiAgICAgICAgc2VsZi5pbl9zdGFjay5hcHBlbmQoeCkKCiAgICBkZWYgcG9wKHNlbGYpIC0+IGludDoKICAgICAgICBpZiBzZWxmLm91dF9zdGFjazoKICAgICAgICAgICAgcmV0dXJuIHNlbGYub3V0X3N0YWNrLnBvcCgpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgIyBtb3ZlIGFsbCB0aGUgZWxlbWVudHMgZnJvbSBpbl9zdGFjayB0byBvdXRfc3RhY2sKICAgICAgICAgICAgIyBzbyB0aGF0IHdlIGNhbiBnZXQgdGhlIGZpcnN0LWluIGVsZW1lbnQKICAgICAgICAgICAgd2hpbGUgKHNlbGYuaW5fc3RhY2spOgogICAgICAgICAgICAgICAgc2VsZi5vdXRfc3RhY2suYXBwZW5kKHNlbGYuaW5fc3RhY2sucG9wKCkpCiAgICAgICAgICAgIHJldHVybiBzZWxmLm91dF9zdGFjay5wb3AoKQoKICAgIGRlZiBwZWVrKHNlbGYpIC0+IGludDoKICAgICAgICB2YWwgPSBzZWxmLnBvcCgpCiAgICAgICAgc2VsZi5vdXRfc3RhY2suYXBwZW5kKHZhbCkKICAgICAgICByZXR1cm4gdmFsCgogICAgZGVmIGVtcHR5KHNlbGYpIC0+IGJvb2w6CiAgICAgICAgcmV0dXJuIG5vdChzZWxmLmluX3N0YWNrIG9yIHNlbGYub3V0X3N0YWNrKSAKYGBgCgojIDIyNS4gSW1wbGVtZW50IFN0YWNrIHVzaW5nIFF1ZXVlcwojIyMgd2F5IDE6IHR3byBxdWV1ZXMKIVtdKC4vaW1hZ2VzLzIwMjMwMjEwMTEzNzAwLnBuZykgIApgYGBQWVRIT04KZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgZGVxdWUKY2xhc3MgTXlTdGFjazoKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5xdWV1ZSA9IGRlcXVlKCkKCiAgICBkZWYgcHVzaChzZWxmLCB4OiBpbnQpIC0+IE5vbmU6CiAgICAgICAgc2VsZi5xdWV1ZS5hcHBlbmQoeCkKICAgICAgICAKICAgIGRlZiBwb3Aoc2VsZikgLT4gaW50OgogICAgICAgICMgbW92ZSBhbGwgdGhlIGVsZW1lbnRzIGV4Y2VwdCB0aGUgbGFzdCBlbGVtZW50IGludG8gCiAgICAgICAgIyBhIHRlbXBvcmFyaWx5IGRlcXVlLCBzbyB0aGF0IHdlIGNhbiBnZXQgdGhlIGxhc3QtaW4gZWxlbWVudAogICAgICAgIHRlbXAgPSBkZXF1ZSgpCiAgICAgICAgd2hpbGUobGVuKHNlbGYucXVldWUpID4gMSk6CiAgICAgICAgICAgIHRlbXAuYXBwZW5kKHNlbGYucXVldWUucG9wbGVmdCgpKQoKICAgICAgICB2YWwgPSBzZWxmLnF1ZXVlLnBvcGxlZnQoKQogICAgICAgICMgcmVhc3NpZ24gdGhlIHRlbXBvcmFyaWx5IGRlcXVlIHRvIHNlbGYucXVldWUKICAgICAgICAjIGFmdGVyIHN0b3JpbmcgdGhlIHZhbHVlIGZvciBvdXRwdXQKICAgICAgICBzZWxmLnF1ZXVlID0gdGVtcAoKICAgICAgICByZXR1cm4gdmFsCgogICAgZGVmIHRvcChzZWxmKSAtPiBpbnQ6CiAgICAgICAgdGVtcCA9IGRlcXVlKCkKICAgICAgICB3aGlsZShsZW4oc2VsZi5xdWV1ZSkgPiAxKToKICAgICAgICAgICAgdGVtcC5hcHBlbmQoc2VsZi5xdWV1ZS5wb3BsZWZ0KCkpCgogICAgICAgIHZhbCA9IHNlbGYucXVldWUucG9wbGVmdCgpCiAgICAgICAgIyBhZGQgdGhlIGxhc3QtaW4gZWxlbWVudCBiYWNrIHRvIHRoZSB0ZW1wb3JhcmlseSBkZXF1ZQogICAgICAgICMgYWZ0ZXIgc3RvcmluZyB0aGUgdmFsdWUgZm9yIG91dHB1dAogICAgICAgIHRlbXAuYXBwZW5kKHZhbCkKICAgICAgICBzZWxmLnF1ZXVlID0gdGVtcAoKICAgICAgICByZXR1cm4gdmFsCgogICAgZGVmIGVtcHR5KHNlbGYpIC0+IGJvb2w6CiAgICAgICAgcmV0dXJuIG5vdCAoc2VsZi5xdWV1ZSkgICAgIApgYGAKIyMjIHdheSAyOiBvbmUgcXVldWUKYXBwZW5kIChzaXplIC0gMSkgZWxlbWVudCBvZiB0aGUgcXVldWUgdG8gdGhlIHF1ZXVlLCB0aGVuIHBvcCBvdXQgdGhlIGxhc3QtaW4gZWxlbWVudApgYGBQWVRIT04KZnJvbSBjb2xsZWN0aW9ucyBpbXBvcnQgZGVxdWUKY2xhc3MgTXlTdGFjazoKCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc2VsZi5xdWV1ZSA9IGRlcXVlKCkKCiAgICBkZWYgcHVzaChzZWxmLCB4OiBpbnQpIC0+IE5vbmU6CiAgICAgICAgc2VsZi5xdWV1ZS5hcHBlbmQoeCkKICAgICAgICAKICAgIGRlZiBwb3Aoc2VsZikgLT4gaW50OgogICAgICAgIHNpemUgPSBsZW4oc2VsZi5xdWV1ZSkKICAgICAgICB3aGlsZSggc2l6ZSA+IDEpOgogICAgICAgICAgICBzZWxmLnF1ZXVlLmFwcGVuZChzZWxmLnF1ZXVlLnBvcGxlZnQoKSkKICAgICAgICAgICAgc2l6ZSAtPSAxCgogICAgICAgIHJldHVybiBzZWxmLnF1ZXVlLnBvcGxlZnQoKQoKICAgIGRlZiB0b3Aoc2VsZikgLT4gaW50OgogICAgICAgIHZhbCA9IHNlbGYucG9wKCkKICAgICAgICBzZWxmLnF1ZXVlLmFwcGVuZCh2YWwpCgogICAgICAgIHJldHVybiB2YWwKCiAgICBkZWYgZW1wdHkoc2VsZikgLT4gYm9vbDoKICAgICAgICByZXR1cm4gbm90IChzZWxmLnF1ZXVlKQpgYGAKCiMgUmVmZXJlbmNlClvku6PnoIHpmo/mg7PlvZUgLSAyMzIu55So5qCI5a6e546w6Zif5YiXXShodHRwczovL3Byb2dyYW1tZXJjYXJsLmNvbS8wMjMyLiVFNyU5NCVBOCVFNiVBMCU4OCVFNSVBRSU5RSVFNyU4RSVCMCVFOSU5OCU5RiVFNSU4OCU5Ny5odG1sIyVFNiU4MCU5RCVFOCVCNyVBRikKCiMjIyMjIFRPRE86IGltcHJvdmUgdGhlIGltYWdlIGFib3V0IHNpbXVsYXRpb24=";export{I as default};
